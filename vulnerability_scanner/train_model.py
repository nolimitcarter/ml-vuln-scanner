import joblib
import numpy as np  # Import numpy for numerical operations
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Ensure the function is defined at the global level, not inside a class or another function
def ip_to_features(ip):
    return [int(x) for x in ip.split('.')]

# Example training data with IP addresses (replace with your actual data)
X = [
    {'ip': '192.168.1.1', 'other_features': [0, 1]},
    {'ip': '192.168.1.2', 'other_features': [1, 0]},
    {'ip': '192.168.1.3', 'other_features': [0, 0]},
    {'ip': '192.168.1.4', 'other_features': [1, 1]},
]
y = [0, 1, 0, 1]  # Labels (e.g., 0 = No vulnerability, 1 = Vulnerability found)

# Preprocess the data to convert IPs to numerical features
X_processed = []  # List to hold processed features
for row in X:
    ip_features = ip_to_features(row['ip'])  # Call the function here
    processed_row = ip_features + row['other_features']  # Combine IP features with other features
    X_processed.append(processed_row)  # Add the processed row to the list

# Convert the processed features to a NumPy array for model input
X = np.array(X_processed)
y = np.array(y)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model using Random Forest
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Save the trained model to a file
joblib.dump(model, 'vulnerability_model.pkl')
print("Model trained and saved as 'vulnerability_model.pkl'")

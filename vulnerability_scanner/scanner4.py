import sqlite3
import nmap
import json

# Function to get vulnerabilities from the database
def get_vulnerabilities_from_db():
    print("Fetching vulnerabilities from the database...")
    conn = sqlite3.connect('vulnerabilities.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM vulnerabilities")
    vulnerabilities = cursor.fetchall()
    conn.close()
    print(f"Found {len(vulnerabilities)} vulnerabilities in the database.")
    return vulnerabilities

# Function to perform a network scan and identify open ports
def scan_network(ip_range):
    print(f"Scanning IP range: {ip_range}")
    nm = nmap.PortScanner()
    nm.scan(hosts=ip_range, arguments='-p 22,80,443')
    open_ports = {}
    
    for host in nm.all_hosts():
        print(f"Scanning host: {host}")
        open_ports[host] = {}
        if 'tcp' in nm[host]:
            for port in nm[host]['tcp']:
                if nm[host]['tcp'][port]['state'] == 'open':
                    service_name = nm[host]['tcp'][port].get('name', 'Unknown')
                    service_version = nm[host]['tcp'][port].get('version', 'Unknown')
                    open_ports[host][port] = {'name': service_name, 'version': service_version}
    print(f"Scan complete. Found open ports: {open_ports}")
    return open_ports

# Function to identify vulnerabilities based on open ports
def identify_vulnerabilities(open_ports):
    vulnerabilities = get_vulnerabilities_from_db()
    matching_vulnerabilities = []
    
    if not open_ports:
        print("No open ports found, skipping vulnerability identification.")
        return matching_vulnerabilities
    
    print("Identifying vulnerabilities...")
    for host, ports in open_ports.items():
        for port, details in ports.items():
            for vuln in vulnerabilities:
                affected_ports = vuln[3]  # Assuming vuln[3] contains the affected port
                if affected_ports and str(port) in affected_ports:
                    matching_vulnerabilities.append({
                        'ip': host,
                        'service': details['name'],
                        'version': details['version'],
                        'vulnerability': vuln[0],
                        'description': vuln[1],
                        'severity': vuln[2],
                        'cpe': vuln[4],
                    })
    print(f"Found {len(matching_vulnerabilities)} matching vulnerabilities.")
    return matching_vulnerabilities

# Main function to scan devices and identify vulnerabilities
def main():
    ip_range = '192.168.1.0/24'  # Modify the range as necessary
    open_ports = scan_network(ip_range)
    
    # Check if open ports were found
    if not open_ports:
        print("No open ports detected. Exiting.")
        return
    
    vulnerabilities = identify_vulnerabilities(open_ports)

    # Display results
    if vulnerabilities:
        for vuln in vulnerabilities:
            print(f"IP: {vuln['ip']}, Service: {vuln['service']}, Version: {vuln['version']}")
            print(f"Vulnerability: {vuln['vulnerability']}, Description: {vuln['description']}")
            print(f"Severity: {vuln['severity']}, CPE: {vuln['cpe']}\n")
    else:
        print("No vulnerabilities found for the open ports.")

if __name__ == "__main__":
    main()


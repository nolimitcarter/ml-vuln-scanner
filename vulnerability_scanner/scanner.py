import os
import json
import logging
import time
from vulnerability_scanner.ai_model import VulnerabilityModel
from vulnerability_scanner.data_preprocessing import preprocess_data
from vulnerability_scanner.utils import generate_report, load_scan_target

# Initialize logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class VulnerabilityScanner:
    def __init__(self, config_path: str):
        """ Initialize the vulnerability scanner with configuration. """
        self.config = self.load_config(config_path)
        self.model = VulnerabilityModel(self.config['ai_model'])
        self.scan_interval = self.config['scanner']['scan_interval']
        self.report_format = self.config['scanner']['report_format']

    def load_config(self, config_path: str):
        """ Load configuration from a JSON file. """
        if not os.path.exists(config_path):
            logger.error(f"Configuration file {config_path} not found.")
            raise FileNotFoundError(f"Configuration file {config_path} not found.")
        
        with open(config_path, 'r') as file:
            config = json.load(file)
        return config
    
    def perform_scan(self, target_system):
        """ Perform the vulnerability scan on a given target system. """
        logger.info(f"Scanning system: {target_system}")

        # Step 1: Load target system data (e.g., network, ports, software versions)
        data = load_scan_target(target_system)
        if not data:
            logger.warning(f"No data found for target: {target_system}")
            return
        
        # Step 2: Preprocess the data (e.g., normalize, feature extraction)
        processed_data = preprocess_data(data)
        logger.info(f"Data preprocessing completed for {target_system}")
        
        # Step 3: Use AI model to predict vulnerabilities
        vulnerabilities = self.model.predict(processed_data)
        
        # Step 4: Generate a report
        generate_report(vulnerabilities, target_system, self.report_format)
        logger.info(f"Report generated for {target_system} in {self.report_format} format.")

    def scan(self):
        """ Start scanning for multiple targets at specified intervals. """
        while True:
            logger.info("Starting new scan cycle...")
            # Here, assume we have a list of target systems to scan
            target_systems = self.config['scanner']['target_systems']
            
            for target in target_systems:
                self.perform_scan(target)

            # Wait for the next scan cycle
            logger.info(f"Waiting for {self.scan_interval} seconds before next scan cycle...")
            time.sleep(self.scan_interval)

if __name__ == "__main__":
    # Initialize scanner with a configuration file
    config_path = 'config/config.json'
    scanner = VulnerabilityScanner(config_path)
    
    # Start scanning
    scanner.scan()

import logging
from vulnerability_scanner.data_preprocessing import preprocess_data
from vulnerability_scanner.vulnerability_checks import check_ip_vulnerabilities  # Custom function for checking vulnerabilities

# Set up logging
logging.basicConfig(level=logging.INFO)

def main():
    # Example raw data to preprocess (this would come from your input file, API, or other sources)
    raw_data = [
        {"ip": "192.168.01.1", "other_features": [0, 1]},
        {"ip": "192.168.01.2", "other_features": [1, 0]},
        {"ip": "172.26.174.33", "other_features": [0, 1]},
        {"ip": "network", "other_features": [0, 0]}  # Invalid IP
    ]

    # Preprocessing step: Validate and clean the data
    logging.info("Starting data preprocessing...")
    processed_data = preprocess_data(raw_data)
    logging.info(f"Data after preprocessing: {processed_data}")

    # Start scanning the valid IPs
    for row in processed_data:
        ip = row['ip']
        if ip != "invalid_ip":  # Only scan valid IPs
            logging.info(f"Scanning IP: {ip}")
            vulnerabilities = check_ip_vulnerabilities(ip)
            if vulnerabilities:
                logging.info(f"Vulnerabilities found for {ip}: {vulnerabilities}")
            else:
                logging.info(f"No vulnerabilities found for {ip}")
        else:
            logging.warning(f"Skipping invalid IP: {row['ip']}")

    logging.info("Scanning process completed!")

if __name__ == "__main__":
    main()

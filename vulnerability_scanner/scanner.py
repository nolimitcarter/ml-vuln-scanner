import nmap
import json
import csv
import concurrent.futures

def scan_network(targets, ports):
    scanner = nmap.PortScanner()
    scanner.scan(targets, ports)

    scan_results = {}
    
    for host in scanner.all_hosts():
        scan_results[host] = {
            'status': scanner[host].state(),
            'tcp': {}
        }

        for port in scanner[host].all_protocols():
            for p in scanner[host][port].keys():
                scan_results[host]['tcp'][p] = scanner[host][port][p]

    return scan_results

def print_results(scan_results):
    # Print header
    print("\n{:<15} {:<8} {:<10} {:<10} {:<10}".format("IP Address", "Status", "SSH (22)", "HTTP (80)", "HTTPS (443)"))
    print("-" * 60)

    for ip, data in scan_results.items():
        status = data['status']
        ssh = data['tcp'].get(22, {}).get('state', 'N/A')
        http = data['tcp'].get(80, {}).get('state', 'N/A')
        https = data['tcp'].get(443, {}).get('state', 'N/A')

        print("{:<15} {:<8} {:<10} {:<10} {:<10}".format(ip, status, ssh, http, https))

def save_results_to_csv(scan_results, filename="scan_results.csv"):
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["IP Address", "Status", "SSH (22)", "HTTP (80)", "HTTPS (443)"])

        for ip, data in scan_results.items():
            status = data['status']
            ssh = data['tcp'].get(22, {}).get('state', 'N/A')
            http = data['tcp'].get(80, {}).get('state', 'N/A')
            https = data['tcp'].get(443, {}).get('state', 'N/A')

            writer.writerow([ip, status, ssh, http, https])

def scan_networks_parallel(networks, ports):
    all_scan_results = {}
    
    # Using ThreadPoolExecutor for parallel scanning
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(scan_network, network, ports): network for network in networks}
        
        for future in concurrent.futures.as_completed(futures):
            network = futures[future]
            try:
                result = future.result()
                all_scan_results[network] = result
            except Exception as exc:
                print(f"Network {network} scan generated an error: {exc}")
    
    return all_scan_results

def main():
    networks = ["192.168.1.0/24", "172.26.174.0/24"]  # List of networks to scan
    ports = "22,80,443"  # Ports to scan
    
    print("\nScanning networks, please wait...")
    results = scan_networks_parallel(networks, ports)

    for network, network_results in results.items():
        print(f"\nResults for {network}:")
        print_results(network_results)
        save_results_to_csv(network_results, f"scan_results_{network.replace('/', '')}.csv")

    # Pretty print JSON for debugging (optional)
    with open("scan_results.json", "w") as json_file:
        json.dump(results, json_file, indent=4)

    print("\nScan complete. Results saved to CSV files and JSON.")

if __name__ == "__main__":
    main()

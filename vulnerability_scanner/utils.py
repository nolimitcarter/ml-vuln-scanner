import numpy as np

def ip_to_features(ip):
    """
    Converts an IP address to numerical features (dummy example).
    :param ip: A string IP address, e.g., '192.168.1.1'
    :return: A list of numerical features
    """
    # Example: Convert each part of the IP address to an integer feature
    try:
        ip_parts = ip.split('.')  # Split the IP address into parts
        return [int(part) for part in ip_parts]  # Convert each part to an integer
    except Exception as e:
        print(f"Error converting IP {ip}: {e}")
        return [0, 0, 0, 0]  # Return default features if thereâ€™s an error


def generate_report(scan_results):
    """
    Generate a summary report from the scan results.
    :param scan_results: A dictionary or list containing scan results.
    :return: A formatted report as a string or other suitable format.
    """
    # Example of a simple report generation:
    report = "Vulnerability Scan Report\n"
    report += "=" * 50 + "\n"
    
    for result in scan_results:
        # Example output, assuming scan_results is a list of dictionaries with keys like 'ip' and 'vulnerability'
        report += f"IP Address: {result['ip']}\n"
        report += f"Vulnerability: {result['vulnerability']}\n"
        report += "-" * 50 + "\n"

    return report


def load_scan_target(target_file_path):
    """
    Loads a scan target from a given file path.
    The target file could be a text file containing a list of URLs or IPs to scan.

    :param target_file_path: Path to the target file.
    :return: A list of scan targets (IPs or URLs).
    """
    try:
        with open(target_file_path, 'r') as file:
            targets = file.readlines()  # Reads all lines in the file
            targets = [target.strip() for target in targets]  # Clean up whitespace or newline characters
        return targets
    except Exception as e:
        print(f"Error loading scan target from {target_file_path}: {e}")
        return []

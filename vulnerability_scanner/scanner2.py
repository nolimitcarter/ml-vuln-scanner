import sqlite3
import nmap
import csv

# Function to get vulnerabilities from the database
def get_vulnerabilities_from_db():
    print("Fetching vulnerabilities from the database...")
    conn = sqlite3.connect('vulnerabilities.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM vulnerabilities")
    vulnerabilities = cursor.fetchall()
    conn.close()
    print(f"Found {len(vulnerabilities)} vulnerabilities in the database.")
    return vulnerabilities

# Function to perform a network scan and identify open ports
def scan_network(ip_range):
    print(f"Scanning IP range: {ip_range}")
    nm = nmap.PortScanner()
    nm.scan(hosts=ip_range, arguments='-p 22,80,443')
    open_ports = {}
    
    for host in nm.all_hosts():
        print(f"Scanning host: {host}")
        open_ports[host] = {}
        if 'tcp' in nm[host]:
            for port in nm[host]['tcp']:
                if nm[host]['tcp'][port]['state'] == 'open':
                    service_name = nm[host]['tcp'][port].get('name', 'Unknown')
                    service_version = nm[host]['tcp'][port].get('version', 'Unknown')
                    open_ports[host][port] = {'name': service_name, 'version': service_version}
    print(f"Scan complete. Found open ports: {open_ports}")
    return open_ports

# Function to identify vulnerabilities based on open ports
def identify_vulnerabilities(open_ports):
    vulnerabilities = get_vulnerabilities_from_db()
    matching_vulnerabilities = []
    
    if not open_ports:
        print("No open ports found, skipping vulnerability identification.")
        return matching_vulnerabilities
    
    print("Identifying vulnerabilities...")
    for host, ports in open_ports.items():
        for port, details in ports.items():
            for vuln in vulnerabilities:
                affected_ports = vuln[3]  # Assuming vuln[3] contains the affected port
                if affected_ports and str(port) in affected_ports:
                    matching_vulnerabilities.append({
                        'ip': host,
                        'service': details['name'],
                        'version': details['version'],
                        'vulnerability': vuln[0],
                        'description': vuln[1],
                        'severity': vuln[2],
                        'cpe': vuln[4],
                    })
    print(f"Found {len(matching_vulnerabilities)} matching vulnerabilities.")
    return matching_vulnerabilities

# Function to save results to a CSV file
def save_results_to_csv(results):
    with open('scan_results.csv', 'w', newline='') as csvfile:
        fieldnames = ['IP Address', 'Status', 'SSH (22)', 'HTTP (80)', 'HTTPS (443)', 'Vulnerabilities']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        writer.writeheader()
        for result in results:
            # Format vulnerabilities as a string
            vulnerabilities = result['vulnerabilities'] if result['vulnerabilities'] else 'None'
            writer.writerow({
                'IP Address': result['ip'],
                'Status': result['status'],
                'SSH (22)': result['ssh'],
                'HTTP (80)': result['http'],
                'HTTPS (443)': result['https'],
                'Vulnerabilities': vulnerabilities
            })
    print("Results saved to scan_results.csv")

# Main function to scan devices and identify vulnerabilities
def main():
    ip_range = '192.168.1.0/24'  # Modify the range as necessary
    open_ports = scan_network(ip_range)
    
    # Check if open ports were found
    if not open_ports:
        print("No open ports detected. Exiting.")
        return
    
    vulnerabilities = identify_vulnerabilities(open_ports)

    # Prepare results for CSV output and terminal display
    results = []
    for host, ports in open_ports.items():
        result = {
            'ip': host,
            'status': 'up' if host in open_ports else 'down',
            'ssh': 'open' if 22 in ports else 'closed',
            'http': 'open' if 80 in ports else 'closed',
            'https': 'open' if 443 in ports else 'closed',
            'vulnerabilities': []  # List of vulnerabilities
        }
        for vuln in vulnerabilities:
            if vuln['ip'] == host:
                result['vulnerabilities'].append(vuln['vulnerability'])
        
        # Print the results to terminal
        print(f"IP: {result['ip']}, Status: {result['status']}, SSH: {result['ssh']}, HTTP: {result['http']}, HTTPS: {result['https']}")
        
        # Convert vulnerabilities to string before joining
        if result['vulnerabilities']:
            print(f"Vulnerabilities: {', '.join(str(vuln) for vuln in result['vulnerabilities'])}")
        else:
            print("Vulnerabilities: None")
        
        print("-" * 50)
        
        # Add the result to the results list for CSV output
        results.append(result)
    
    save_results_to_csv(results)

if __name__ == "__main__":
    main()


import os
import json
import logging
import time
from vulnerability_scanner.ai_model import VulnerabilityModel
from vulnerability_scanner.data_preprocessing import preprocess_data
from vulnerability_scanner.utils import generate_report, load_scan_target
from vulnerability_scanner.utils import ip_to_features

# Initialize logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class VulnerabilityScanner:
    def __init__(self):
        self.data = []  # Data will be populated later

    def load_data(self):
        """
        Loads data for processing. You can replace this with actual data loading logic.
        """
        self.data = [
            {'ip': '192.168.01.1', 'other_features': [0, 1]},
            {'ip': '192.168.01.2', 'other_features': [1, 0]},
            {'ip': 'network', 'other_features': [0, 0]},  # Example of problematic data
        ]

        # Print data for inspection before preprocessing
        print(f"Data before preprocessing: {self.data}")

    def preprocess_data(self, data):
        """
        Processes the data, converting IP addresses to numerical features and handling other transformations.
        """
        # Debugging: Print data being processed
        print(f"Data being processed: {data}")

        processed_data = []

        for index, row in enumerate(data):
            print(f"Processing row {index}: {row}")  # Debugging line
            if isinstance(row, dict) and 'ip' in row:
                # Add your preprocessing logic here (e.g., IP-to-feature conversion)
                processed_data.append(row)  # Just appending for now as an example
            else:
                print(f"Invalid row format at index {index}: {row}")
                raise ValueError(f"Invalid row format at index {index}: {row}. Each row should be a dictionary with 'ip' and other features.")

        return processed_data

    def scan(self):
        """
        The main scanning function. Loads data and processes it.
        """
        # Load the data (this could be replaced with actual data loading from files, databases, etc.)
        self.load_data()

        # Preprocess the data
        processed_data = self.preprocess_data(self.data)

        # Output processed data (can be used in further analysis or AI model prediction)
        print(f"Processed Data: {processed_data}")

# Example usage
if __name__ == "__main__":
    scanner = VulnerabilityScanner()
    scanner.scan()

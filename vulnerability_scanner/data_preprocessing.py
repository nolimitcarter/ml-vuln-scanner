# import numpy as np

from vulnerability_scanner.utils import ip_to_features  # Assuming this function exists

def preprocess_data(data):
    """
    Processes the raw data and converts IP addresses into numerical features.
    Assumes that the data is a list of dictionaries with an 'ip' key and other feature(s).

    :param data: A list of dictionaries, each containing an 'ip' key and other features.
    :return: A list of numerical feature vectors.
    """
    processed_data = []

    for index, row in enumerate(data):
        print(f"Processing row {index}: {row}")  # Debugging line to see the row

        # Ensure that row is a dictionary and contains an 'ip' key
        if isinstance(row, dict) and 'ip' in row:
            # Convert the IP address into numerical features (you can replace this with actual logic)
            ip_features = ip_to_features(row['ip'])  # Placeholder function
            features = ip_features + row.get('other_features', [])  # Combine IP features with any other features
            processed_data.append(features)
        else:
            print(f"Invalid row format at index {index}: {row}")  # Debugging line to see invalid rows
            raise ValueError(f"Invalid row format at index {index}: {row}. Each row should be a dictionary with 'ip' and other features.")

    return processed_data
